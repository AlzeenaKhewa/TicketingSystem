@model TicketingSystem.Models.ChatRoomViewModel
@{
    ViewData["Title"] = $"Chat for Ticket: {Model.TicketTitle}";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" />
    <link rel="stylesheet" href="~/css/chat-room.css" asp-append-version="true" />
    <style>
        /* --- NEW FEATURE: Style for the role label --- */
        .role-label {
            display: inline-block;
            margin-left: 8px;
            font-size: 0.7em;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 4px;
            background-color: #e9ecef; /* A light grey color */
            color: #495057; /* A darker grey for text */
            vertical-align: middle;
            text-transform: uppercase;
        }
    </style>
</head>
<body>
    <div class="chat-page-wrapper chat-wrapper" data-ticket-id="@Model.TicketId" data-current-user-id="@Model.CurrentUserId">
        <!-- User List Panel -->
        <aside class="user-list-panel">
            <div class="panel-header">Conversations</div>
            <div class="user-list" id="user-list">
                <!-- Public Chat -->
                <div class="user-list-item active" data-is-public="true" data-user-id="null">
                    <div class="avatar" style="background-color: #6c757d;"><i class="fas fa-users"></i></div>
                    <div class="user-info">
                        <div class="user-name">Public Chat</div>
                        <div class="user-role">All participants</div>
                    </div>
                </div>

                <!-- Private Chat Users -->
                @foreach (var user in Model.AllUsers.Values.Where(u => u.UserId != Model.CurrentUserId))
                {
                    <div class="user-list-item" data-is-public="false" data-user-id="@user.UserId">
                        <div class="avatar" style="background-color: @user.AvatarBackgroundColor;">@user.Initials</div>
                        <div class="user-info">
                            <div class="user-name">@user.Name</div>
                            <div class="user-role">@user.Role</div>
                        </div>
                    </div>
                }
            </div>
        </aside>

        <!-- Chat Panel -->
        <main class="chat-main-panel">
            <header class="chat-header">
                <h5 id="chat-header-title">Public Chat</h5>
            </header>

            <div class="message-list" id="message-list">
                @foreach (var message in Model.InitialMessages)
                {
                    if (!Model.AllUsers.TryGetValue(message.SenderId, out var sender)) { continue; }
                    var alignment = message.SenderId == Model.CurrentUserId ? "sent" : "received";
                    var isPrivate = message.RecipientId.HasValue;

                    <div class="message-row @alignment"
                         data-is-private="@isPrivate.ToString().ToLower()"
                         data-sender-id="@message.SenderId"
                         data-recipient-id="@(message.RecipientId ?? 0)">
                        <div class="avatar" style="background-color: @sender.AvatarBackgroundColor;">@sender.Initials</div>
                        <div class="message-content">
                            <div class="message-sender">
                                @sender.Name
                                <!-- --- NEW FEATURE: Display the sender's role --- -->
                                <span class="role-label">@message.SenderRole</span>
                                @(isPrivate ? "(private)" : "")
                            </div>
                            <div class="message-bubble">@message.Content</div>
                        </div>
                    </div>
                }
            </div>

            <footer class="chat-input-area">
                <form id="chat-form" style="display: contents;">
                    <input type="text" id="message-input" class="form-control" placeholder="Message..." autocomplete="off" />
                    <button type="submit" class="btn btn-primary" style="margin-left: 10px;">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </footer>
        </main>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const currentUserId = @Html.Raw(Json.Serialize(Model.CurrentUserId));
            const ticketId = @Html.Raw(Json.Serialize(Model.TicketId));
            const allUsers = @Html.Raw(Json.Serialize(Model.AllUsers));

            let currentRecipientId = null;
            let isPublicChat = true;

            const userList = document.getElementById('user-list');
            const chatHeaderTitle = document.getElementById('chat-header-title');
            const messageList = document.getElementById('message-list');
            const messageInput = document.getElementById('message-input');
            const chatForm = document.getElementById('chat-form');

            const filterMessages = () => {
                document.querySelectorAll('.message-row').forEach(row => {
                    const isPrivate = row.dataset.isPrivate === 'true';
                    const senderId = parseInt(row.dataset.senderId);
                    const recipientId = parseInt(row.dataset.recipientId);

                    let show = false;
                    if (isPublicChat) {
                        show = !isPrivate;
                    } else {
                        show = isPrivate &&
                            ((senderId === currentUserId && recipientId === currentRecipientId) ||
                             (senderId === currentRecipientId && recipientId === currentUserId));
                    }
                    row.style.display = show ? 'flex' : 'none';
                });
                messageList.scrollTop = messageList.scrollHeight;
            };

            userList.addEventListener('click', (e) => {
                const target = e.target.closest('.user-list-item');
                if (!target || target.classList.contains('active')) return;

                userList.querySelector('.active').classList.remove('active');
                target.classList.add('active');

                isPublicChat = target.dataset.isPublic === 'true';
                currentRecipientId = isPublicChat ? null : parseInt(target.dataset.userId);

                chatHeaderTitle.textContent = isPublicChat
                    ? "Public Chat"
                    : `Private Chat with ${allUsers[currentRecipientId].name}`;

                filterMessages();
            });

            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const message = messageInput.value.trim();
                if (!message || connection.state !== signalR.HubConnectionState.Connected) return;

                try {
                    if (isPublicChat) {
                        await connection.invoke("SendPublicMessage", ticketId, message);
                    } else {
                        await connection.invoke("SendPrivateMessage", ticketId, currentRecipientId, message);
                    }
                    messageInput.value = '';
                } catch (err) {
                    console.error("Error sending message: ", err);
                }
            });

            const connection = new signalR.HubConnectionBuilder()
                .withUrl(`/chathub?userId=${currentUserId}`)
                .withAutomaticReconnect()
                .build();

            connection.on("ReceivePublicMessage", (message) => {
                location.reload(); // optional: reload or append dynamically
            });

            connection.on("ReceivePrivateMessage", (message) => {
                if (!isPublicChat &&
                    (message.senderId === currentRecipientId || message.recipientId === currentRecipientId)) {
                    location.reload();
                }
            });

            async function startConnection() {
                try {
                    await connection.start();
                    await connection.invoke("JoinTicketRoom", ticketId.toString());
                } catch (err) {
                    console.error("SignalR connection error:", err);
                    setTimeout(startConnection, 5000);
                }
            }

            filterMessages();
            startConnection();
        });
    </script>
</body>
</html>